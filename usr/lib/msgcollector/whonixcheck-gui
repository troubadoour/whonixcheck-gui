#!/usr/bin/python

import sys,os,signal
from PyQt4 import QtCore, QtGui
import subprocess
from subprocess import check_output, Popen
#global output

class store:
  pid = ""
  fifo = False

class whonixcheck_gui(QtGui.QDialog):
  def __init__(self):
    #Layout
    QtGui.QDialog.__init__(self)
    #self.resize(800, 350)
    self.move(0, 0)

    self.notice = QtGui.QLabel(self)
    self.notice.setText("""Checking Tor Connection, Tor Browser Version, Operating System Updates, Whonix Version, Whonix News...
This will happen in background and will take approximately three minutes...
""")
    self.terminal = QtGui.QTextBrowser(self)
    self.terminal.setStyleSheet("background: #303030;color: white;")

    self.progressBar = QtGui.QProgressBar(self)
    self.progressBar.setProperty("value", 0)

    self.cancelButton = QtGui.QDialogButtonBox(self)
    self.cancelButton.setStandardButtons(QtGui.QDialogButtonBox.Cancel)

    layout = QtGui.QGridLayout(self)
    layout.addWidget(self.notice, 1, 0)
    layout.addWidget(self.terminal, 2, 0)
    layout.addWidget(self.progressBar, 3, 0)
    layout.addWidget(self.cancelButton, 4, 0)

    self.connect(self.cancelButton, QtCore.SIGNAL("rejected()"), self.cancel)

    self.process = QtCore.QProcess()
    self.connect(self.process, QtCore.SIGNAL("readyReadStandardOutput()"), self.readOutput)
    self.connect(self.process, QtCore.SIGNAL("finished(int)"), self.completed)

    self.process.start("whonixcheck")

    f= open("/var/run/msgcollector/whonixcheck.titlecli")
    title = f.read()
    f.close()
    self.setWindowTitle(title)

  def readOutput(self):
    spacing = "<p style=\" margin-top:12px; margin-bottom:12px;\">"
    output = str(self.process.readAllStandardOutput())
    pos = output.find('[whonixcheck]')
    pretty_type = output[:pos]
    if pretty_type.find('INFO') != -1:
      itype = "[<span style=\" color:#00c000;\">INFO</span>] "
    elif pretty_type.find('WARNING') != -1:
      itype = "[<span style=\" color:#ff8000;\">WARNING</span>] "
    elif pretty_type.find('ERROR') != -1:
      itype = "[<span style=\" font-weight:600; color:#ff0000;\">ERROR</span>] "
    else:
      sys.exit("whonixcheck stopped")
    message = output[pos:]
    msgend = "</p>"
    htmlout = spacing + itype + message + msgend
    self.terminal.append(QtCore.QString(htmlout))

    try:
      if not store.fifo:
        fifo_file = check_output('ls /var/run/msgcollector/whonixcheck*.fifo', shell=True)
        pos = fifo_file.find('whonixcheck.')
        fifo_pid = fifo_file[pos:]
        pos = fifo_pid.find('.fifo')
        store.pid = fifo_pid[:pos]
        store.fifo = True
      else:
        if os.path.isfile('/var/run/msgcollector/' + store.pid + '.progresstxt'):
          fname = '/var/run/msgcollector/' + store.pid + '.progresstxt'
          f = open(fname)
          progress = int(f.read())
          f.close()
          self.progressBar.setProperty("value", progress)
    except subprocess.CalledProcessError as e:
      store.fifo = False

  def completed(self):
    #fname = '/var/run/msgcollector/' + store.pid + '.progresstxt'
    #f = open(fname)
    #progress = int(f.read())
    #f.close()
    #self.progressBar.setProperty("value", progress)
    sys.exit(0)

  def cancel(self):
    os.kill(self.process.pid(), signal.SIGTERM)
    sys.exit("whonicheck-gui cancelled by user.")


if __name__ == "__main__":
  app = QtGui.QApplication(sys.argv)
  getpid = True
  window = whonixcheck_gui()
  window.show()
  sys.exit(app.exec_())